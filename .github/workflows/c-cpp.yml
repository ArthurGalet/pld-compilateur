name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    defaults:
      run:
        working-directory: ./compiler
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name : Install Antrl4
      run: sudo apt install antlr4 libantlr4-runtime-dev default-jdk
    - name: Make
      run: make
    - name: Upload compiler
      uses: actions/upload-artifact@master
      with:
        name: compiler
        path: compiler/ifcc

  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tests

    outputs:
      files: ${{ steps.test_files.outputs.files }}
        
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve test files
      id: test_files
      run: echo "files=$(find testfiles -type f -name '*.c' | jq -R -cs 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
    
  tests:
    runs-on: ubuntu-latest
    needs: [build, setup]
    defaults:
      run:
        working-directory: ./tests
    
    strategy:
      matrix:
        file: ${{ fromJSON(needs.setup.outputs.files) }}
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: Download compiler
      uses: actions/download-artifact@master
      with:
        name: compiler
        path: compiler/
        
    - name: Setup
      id: setup
      continue-on-error: true
      run: |
        echo "wd=$(pwd)" >> $GITHUB_OUTPUT
        
        filepath="${{ matrix.file }}"
        output_dir="${filepath%.c//\//-}"_output
        
        mkdir -p "$output_dir" || continue
        cd "$output_dir" || continue

        echo "test_dir=$output_dir" >> $GITHUB_OUTPUT
    
    - name: Compile with gcc
      id: gcc_compile
      run: |
        set +e
        cd ${{ steps.setup.outputs.test_dir }}
        gcc -S -o asm-gcc.s ${{ steps.setup.outputs.wd }}/${{ matrix.file }} > gcc-compile.txt 2>&1
        gcc -o exe-gcc asm-gcc.s > /dev/null 2>&1
        ./exe-gcc > gcc-execute.txt 2>&1
        echo "gccstatus=$?" >> $GITHUB_OUTPUT
    
    - name: Compile with ifcc
      id: ifcc_compile
      run: |
        set +e
        cd ${{ steps.setup.outputs.test_dir }}
        base=${{ steps.setup.outputs.wd }}
        chmod 777 $base/../compiler/ifcc $base/ifcc-wrapper.sh
        $base/ifcc-wrapper.sh asm-ifcc.s "$base/$${{ matrix.file }}" > ifcc-compile.txt 2>&1
        echo "ifccstatus=$?" >> $GITHUB_OUTPUT
        
    - name: Compare results
      run: |
        gccstatus=${{ steps.gcc_compile.outputs.gccstatus }}
        ifccstatus=${{ steps.ifcc_compile.outputs.ifccstatus }}
    
        echo $(basename ${{ matrix.file }})
        if [ "$gccstatus" -ne 0 ] && [ "$ifccstatus" -ne 0 ]; then
            echo 'TEST OK'
        elif [ "$gccstatus" -ne 0 ] && [ "$ifccstatus" -eq 0 ]; then
            echo 'TEST FAIL (your compiler accepts an invalid program)'
            exit 1  # Fail the job if the test fails
        elif [ "$gccstatus" -eq 0 ] && [ "$ifccstatus" -ne 0 ]; then
            echo 'TEST FAIL (your compiler rejects a valid program)'
            exit 1  # Fail the job if the test fails
        else
            gcc -o exe-ifcc asm-ifcc.s > /dev/null 2>&1 && ./exe-ifcc > ifcc-execute.txt 2>&1
            if ! cmp -s "gcc-execute.txt" "ifcc-execute.txt"; then
                echo 'TEST FAIL (different results at execution)'
                exit 1  # Fail the job if the test fails
            else
                echo 'TEST OK'
            fi
        fi
